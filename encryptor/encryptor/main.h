#pragma once
#include <windows.h>


FILE * input;
FILE * output;
char inputBuffer[10000];
char outputBuffer[10000];
int inputBufferPos;
int outputBufferPos;

/*!
 * Шифрование текста
 * \param[in] rows Количество строк матрицы
 * \param[in] columns Количество столбцов матрицы 
 * \param[in] rowOrder Порядок перестановки строк
 * \return Зашифрованный текст
 */
void encrypt(int rows,int columns,  int* rowOrder)
{
	// Пока не достигнут конец файла...
		// Заполнить матрицу по столбцам слева направо (fillMatrixByColumns)
		// Создать строку из матрицы по строкам в указанном порядке (createStringFromMatrixByRows)
		// Записать строку в конец файла (saveString)
}

/*!
 * Расшифровка текста 
 * \param[in] rows Количество строк матрицы
 * \param[in] columns Количество столбцов матрицы 
 * \param[in] rowOrder Порядок перестановки строк
 * \return Расшифрованный текст
 */
void decrypt(int rows,int columns,  int* rowOrder)
{
	// Пока не достигнут конец файла...
		// Заполнить матрицу по строкам в указаном порядке (fillMatrixByRows)
		// Создать строку из матрицы по столбцам слева направо (createStringFromMatrixByColumns)
		// Записать строку в конец файла (saveString)
}

/*!
 * Сохранение строки в файл
 * \param[in] string Строка 
 * \return Успешность сохранения
 */
bool saveString(char * string)
{
	return true;	
}


/*!
 * Заполнить матрицу по колонкам
 * \param[out] matrix Матрица
 * \param[in] rowCount Количество строк матрицы
 * \param[in] columnCount Количество столбцов матрицы
 * \param[in] text Текст
 */
void fillMatrixByColumns(char** matrix,int rowCount,int columnCount, char* text)
{
}

/*!
 * Заполненить матрицу по строкам
 * \param[out] matrix Матрица
 * \param[in] rowCount Количество строк матрицы
 * \param[in] columnCount Количество столбцов матрицы
 * \param[in] text Текст 
 */
void fillMatrixByRows(char** matrix,int rowCount,int columnCount, char* text)
{
}

/*!
 * Создание строки из матрицы по строкам
 * \param[in] matrix Матрица
 * \param[in] rowCount Количество строк матрицы
 * \param[in] columnCount Количество столбцов матрицы
 * \return Строка
 */
char* createStringFromMatrixByRows(char** matrix,int rowCount,int columnCount)
{
	char* a;
	return a;
}


/*!
 * Создание строки из матрицы по столбцам
 * \param[in] matrix Матрица 
 * \param[in] rowCount Количество строк матрицы
 * \param[in] columnCount Количество столбцов матрицы
 * \return Строка
 */
char* createStringFromMatrixByColumns(char** matrix,int rowCount,int columnCount)
{
	char* a;
	return a;
}

/*!
 * Проверка аргументов командной строки на корректность
 * \param[in] argc Количество аргументов
 * \param[in] argv Аргументы
 * \return корректность аргументов
 */
int checkParameters(int argc, char* argv[])
{
	// Если количество параметров меньше 7
		// Напечатать ошибку о неверном количестве параметров
		// Вернуть код ошибки
	// Иначе если первый параметр не заканчивается на  «.txt»
		// Напечатать ошибку о неверном расширении входного файла
		// Вернуть код ошибки
	// Иначе если второй параметр не является «-е» и «-d»
		// Напечатать ошибку о том, что неверно указан ключ режима
		// Вернуть код ошибки
	// Иначе если третий параметр не заканчивается на «.txt»
		// Напечатать ошибку о неверном расширении выходного файла
		// Вернуть код ошибки
	// Иначе если ошибки ещё не найдены
		// Для четвертого и пятого параметра…
			// Если параметр является числом
				// Если оно меньше 1
					// Напечатать ошибку о том, что размер матрицы не может быть меньше 1
					// Вернуть код ошибки
			// Иначе
				// Напечатать ошибку о неверном записи размеров матрицы
				// Вернуть код ошибки
	// Иначе если шестой параметр не является «-s»
		// Напечатать ошибку о том, что не указан ключ «-s»
		// Вернуть код ошибки
	// Иначе
		// Преобразовать четвертый параметр в число (произвольное кол-во параметров)
		// Если количество параметров не равно сумме 6 (обязательное кол-во параметров) и указанному количеству строк (произвольное кол-во параметров)
			// Напечатать ошибку о том, что перечислены не все строки матрицы
			// Вернуть код ошибки
		// Иначе
			// Для всех параметров, начиная с седьмого…
				// Если параметр не является числом ИЛИ является отрицательным числом ИЛИ число больше кол-ва строк – 1 ИЛИ число повторяется
					// Напечатать ошибку о том, что перечисление строк записано неверно
					// Вернуть код ошибки
	// Вернуть 0
	return 0;
}

/*!
 * Считать символ из файла 
 * \return символ
 */
char readByte()
{
	char a;
	return a;
}
/*!
 * Считать строку из 10000 символов
 * \return строка
 */
char * read()
{
	char* a;
	return a;
}